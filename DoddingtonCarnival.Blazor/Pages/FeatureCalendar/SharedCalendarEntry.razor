@using BlazorDownloadFile;
@using DoddingtonCarnival.Blazor.Services
@using DoddingtonCarnival.Blazor.Models
@using System.Text;

@inject LocationsService locationsService
@inject IBlazorDownloadFileService BlazorDownloadFileService

@if (calendarEntry != null)
{
    var fontModifier = "";
    var titleColour = "carnivalpage-orange-accent";

    var visibilityModifier = "";

    if (calendarEntry.EndDateTime < DateTime.Now)
    {
        fontModifier = "past";
        titleColour = "Grey";

        if (showPastEvents == false)
        {
            visibilityModifier = "hidden";
        }
    }

    <div class="row calendarEvent @visibilityModifier @fontModifier">
        <div class="col-lg-1 col-md-2 dateDetails d-none d-sm-none d-md-block d-lg-block d-xl-block">
            <div class="month">@calendarEntry.StartDateTime.ToString("MMM").ToUpper()</div>
            <div class="day">@calendarEntry.StartDateTime.Day.ToString("00")</div>
            <div class="year">@calendarEntry.StartDateTime.Year</div>
        </div>
        <div class="col-sm-12 dateDetails d-sm-block d-md-none d-lg-none d-xl-none" style="text-align: left !important;--bs-gutter-x: 0;">
            <span class="day">@calendarEntry.StartDateTime.Day.ToString("00")</span>
            <span class="day">@calendarEntry.StartDateTime.ToString("MMM").ToUpper()</span>
            <span class="day">@calendarEntry.StartDateTime.Year</span>
        </div>

        <div class="col locationDetails">
            <div class="row time">@calendarEntry.StartDateTime.DayOfWeek @calendarEntry.EventTimes</div>
            <div class="row title @titleColour">@calendarEntry.Title</div>

            <div class="row location">
                @* @locationsService.GetLocationString(@calendarEntry.LocationId) *@
                @calendarEntry.Venue
            </div>

            <div class="row details">
                @foreach (var description in calendarEntry.Description)
                {
                    <p class="">@description</p>
                }

                @* @if (calendarEntry.Tags is not null)
            {
            <p>
            @foreach (var tag in calendarEntry.Tags)
            {
            @tag

            if (calendarEntry.Tags.Last() != tag)
            {
            <span> | </span>
            }
            }
            </p>
            } *@
            </div>



            <div class="goButtons">
                @if (!string.IsNullOrEmpty(calendarEntry.WebLink) && !calendarEntry.WebLink.EndsWith("/calendar"))
                {
                    <a href="@calendarEntry.WebLink" class="btn btn-primary btn-sm goButton">More Information</a>
                }

                <button @onclick="DownloadFile" class="btn btn-primary btn-sm goButton">Add to Calendar</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public CalendarEntry? calendarEntry { get; set; }

    [Parameter]
    public bool showPastEvents { get; set; }

    string Content = "Hello!";

    protected override async Task OnInitializedAsync()
    {

    }

    public async void DownloadFile()
    {
        if (this.calendarEntry == null)
        {
            return;
        }

        var contents = GenerateFileContents();

        var memoryStream = ConvertMe(contents);

        await BlazorDownloadFileService.DownloadFile($"DVSC_{this.calendarEntry.Title.Replace(" ", "-")}.ics", memoryStream, "application/octet-stream");
    }

    public string GenerateFileContents()
    {
        if (this.calendarEntry == null)
        {
            return "this file is intentionally blank!";
        }

        var stringBuilder = new StringBuilder();

        stringBuilder.AppendLine("BEGIN:VCALENDAR");
        stringBuilder.AppendLine("VERSION:2.0");
        stringBuilder.AppendLine("PRODID:-//hacksw/handcal//NONSGML v1.0//EN");
        stringBuilder.AppendLine("BEGIN:VEVENT");

        stringBuilder.AppendLine($"DTSTAMP:{AsZuluString(this.calendarEntry.StartDateTime)}");
        stringBuilder.AppendLine($"DTSTART:{AsZuluString(this.calendarEntry.StartDateTime)}");
        stringBuilder.AppendLine($"DTEND:{AsZuluString(this.calendarEntry.EndDateTime)}");

        stringBuilder.AppendLine("");
        stringBuilder.AppendLine($"SUMMARY:Doddington Village Sports & Carnival - {this.calendarEntry.Title}");
        stringBuilder.AppendLine($"LOCATION:{this.calendarEntry.Venue}");
        stringBuilder.AppendLine($"DESCRIPTION:{GetDescription(this.calendarEntry.Description)}");
        stringBuilder.AppendLine("END:VEVENT");
        stringBuilder.AppendLine("END:VCALENDAR");

        return stringBuilder.ToString();
    }

    public MemoryStream ConvertMe(string input)
    {
        byte[] byteArray = Encoding.UTF8.GetBytes(input);

        MemoryStream stream = new MemoryStream(byteArray);

        return stream;
    }

    public string AsZuluString(DateTime dateTime)
    {
        string foo = dateTime.ToUniversalTime().ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'");

        return foo;
    }

    public string GetDescription(List<string>? descriptionList)
    {
        if (descriptionList == null || !descriptionList.Any())
        {
            return "Nothing to see here!";
        }

        var stringBuilder = new StringBuilder();

        foreach (var item in descriptionList)
        {
            stringBuilder.AppendLine(item);
        }

        return stringBuilder.ToString();
    }
}